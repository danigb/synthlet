export const PROCESSOR = `(()=>{function p(a){return Object.keys(a).map(t=>{let{min:e,max:o,init:r}=a[t];return{name:t,minValue:e,maxValue:o,defaultValue:r,automationRate:"k-rate"}})}var s=class{constructor(t,e=440){this.sampleRate=t;this.inc=e/this.sampleRate,this.phase=0}freq(t){this.inc=t/this.sampleRate}tick(t=1){for(this.phase+=t*this.inc;this.phase>=1;)this.phase-=1;for(;this.phase<=-1;)this.phase+=1;return this.phase}};var m={bpm:{min:0,max:300,init:100}};function d(a){let t=100,e={events:[{time:0,value:1}],duration:1},o=new s(a,t/60),r=0,c=0;function f(n){t=n.bpm[0],o.freq(n.bpm[0]/60*e.duration)}function l(n){e=n,r=r%e.duration,o.freq(t/(60*e.duration))}function P(n){if(!e.duration)return;let i=o.tick(n.length)*e.duration;i<=c&&(r=0),!(r>=e.events.length)&&(i>e.events[r].time&&(n[0]=e.events[r].value,r=r+1),c=i)}return{setParams:f,setSequence:l,fillControl:P}}var y=p(m),u=class extends AudioWorkletProcessor{constructor(){super();this.d=!1,this.p=d(sampleRate),this.port.onmessage=e=>{switch(e.data.type){case"SET_SEQUENCE":this.p.setSequence(e.data.sequence);return;case"DISCONNECT":this.d=!0;return}}}process(e,o,r){return this.d?!1:(this.p.setParams(r),this.p.fillControl(o[0][0]),!0)}static get parameterDescriptors(){return y}};registerProcessor("SequencerWorklet",u);})();`;
