export const PROCESSOR = `(()=>{function P(e){return Object.keys(e).map(t=>{let{min:r,max:n,init:o}=e[t];return{name:t,minValue:r,maxValue:n,defaultValue:o,automationRate:"k-rate"}})}var x=Math.PI*2;function u(e,t){return e<t?(e/=t,e+e-e*e-1):e>1-t?(e=(e-1)/t,e*e+e+e+1):0}function c(e,t,r){let n=e<r?1:-1;return n+=u(e,t),n-=u((e+(1-r))%1,t),n}var k=2/4294967295;var b={wave:{min:0,max:5,init:1},frequency:{min:0,max:1e4,init:440},detune:{min:-100,max:100,init:.01}},m=class{constructor(t){this.sampleRate=t;this.osc=new d(t)}setParams(t,r,n){this.osc.setParams(t,r)}fillAudio(t){this.osc.fillAudio(t,1,!1)}},d=class{constructor(t){this.sampleRate=t;this.triLast=0;this.triCurrent=0;this.noiseValue=19.19191919191919;this.dt=1/t,this.phase=0}setParams(t,r){this.waveformType=t,this.freq=r}fillAudio(t,r,n){let o=this.phase,i=this.freq*this.dt;for(let s=0;s<t.length;s++){let a=r*this.process(o,i);t[s]=n?t[s]+a:a,o+=i,o>=1&&(o-=1)}this.phase=o}process(t,r){switch(this.waveformType){case 0:return Math.sin(this.phase*x);case 1:return this.triLast=this.triCurrent,this.triCurrent=r*c(this.phase,r,.5)+(1-r)*this.triLast,this.triCurrent*5;case 2:return 1-2*this.phase+u(this.phase,r);case 3:return c(this.phase,r,.5);case 4:return c(this.phase,r,.75);case 5:return this.noiseValue+=19,this.noiseValue*=this.noiseValue,this.noiseValue-=Math.floor(this.noiseValue),this.noiseValue-.5;default:return 0}}};var y=P(b),f=class extends AudioWorkletProcessor{constructor(){super();this.mika=new m(sampleRate)}process(r,n,o){let i=o.wave[0],s=o.frequency[0],a=o.detune[0];this.mika.setParams(i,s,a);let p=n[0];for(let l=0;l<p.length;l++)this.mika.fillAudio(p[l]);return!0}static get parameterDescriptors(){return y}};registerProcessor("MikaWorklet",f);})();`;
