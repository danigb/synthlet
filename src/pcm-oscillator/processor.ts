export const PROCESSOR = `(()=>{function y(i){return Object.keys(i).map(s=>{let{min:e,max:a,def:r}=i[s];return{name:s,minValue:e,maxValue:a,defaultValue:r,automationRate:"k-rate"}})}var x={gate:{min:0,max:1,def:0},speed:{min:-100,max:100,def:1}};function g(i){let s=0,e=null,a=0,r=1;function l(t,o){if(e)for(r=o;r>e.length;)r-=e.length;s=t}function d(t){e=t}function c(t){if(e){let o=e.length;for(let f=0;f<t.length;f++){let p=Math.floor(a),O=a-p,n=a+r;n<0&&(n+=o),n>=o&&(n-=o);let m=Math.ceil(n),A=n-m,P=e[p],b=e[m];t[f]=P+(b-P)*(O+A),a=n}}else for(let o=0;o<t.length;o++)t[o]=0}return{setParams:l,fillAudioMono:c,setBuffer:d}}var k=y(x),u=class extends AudioWorkletProcessor{constructor(){super();this.p=g(sampleRate),this.port.onmessage=e=>{e.data.type==="AUDIO"&&(this.p.setBuffer(e.data.buffer),this.port.postMessage({type:"RECEIVED",len:e.data.buffer.length}))}}process(e,a,r){let l=r.gate[0],d=r.speed[0];this.p.setParams(l,d);let c=a[0];for(let t=0;t<c.length;t++)this.p.fillAudioMono(c[t]);return!0}static get parameterDescriptors(){return k}};registerProcessor("PcmOscillatorWorklet",u);})();`;
