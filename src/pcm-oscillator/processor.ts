export const PROCESSOR = `(()=>{function y(i){return Object.keys(i).map(s=>{let{min:e,max:a,def:r}=i[s];return{name:s,minValue:e,maxValue:a,defaultValue:r,automationRate:"k-rate"}})}var x={gate:{min:0,max:1,def:0},speed:{min:-100,max:100,def:1}};function g(i){let s=0,e=null,a=0,r=1;function c(t,o){if(e)for(r=o;r>e.length;)r-=e.length;s=t}function u(t){e=t}function l(t){if(e){let o=e.length;for(let d=0;d<t.length;d++){let m=Math.floor(a),O=a-m,n=a+r;n<0&&(n+=o),n>=o&&(n-=o);let p=Math.ceil(n),A=n-p,P=e[m],b=e[p];t[d]=P+(b-P)*(O+A),a=n}}else for(let o=0;o<t.length;o++)t[o]=0}return{setParams:c,fillAudioMono:l,setBuffer:u}}var h=y(x),f=class extends AudioWorkletProcessor{constructor(){super();this.p=g(sampleRate),this.port.onmessage=e=>{e.data.type==="AUDIO"&&(this.p.setBuffer(e.data.buffer),this.port.postMessage({type:"RECEIVED",len:e.data.buffer.length}))}}process(e,a,r){let c=r.gate[0],u=r.speed[0];this.p.setParams(c,u);let l=a[0];for(let t=0;t<l.length;t++)this.p.fillAudioMono(l[t]);return!0}static get parameterDescriptors(){return h}};registerProcessor("PcmOscillatorWorklet",f);})();`;
