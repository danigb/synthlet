export const PROCESSOR = `(()=>{function y(i){return Object.keys(i).map(s=>{let{min:e,max:o,defaultValue:a}=i[s];return{name:s,minValue:e,maxValue:o,defaultValue:a,automationRate:"k-rate"}})}var x={gate:{min:0,max:1,defaultValue:0},speed:{min:-100,max:100,defaultValue:1}};function b(i){let s=0,e=null,o=0,a=1;function u(t,r){a=r,s=t}function c(t){e=t}function l(t){if(e){let r=e.length;for(let d=0;d<t.length;d++){let m=Math.floor(o),g=o-m,n=o+a;for(;n<0;)n+=r;for(;n>=r;)n-=r;let p=Math.ceil(n),O=n-p,P=e[m],A=e[p];t[d]=P+(A-P)*(g+O),o=n}}else for(let r=0;r<t.length;r++)t[r]=0}return{setParams:u,fillAudioMono:l,setBuffer:c}}var k=y(x),f=class extends AudioWorkletProcessor{constructor(){super();this.p=b(sampleRate),this.port.onmessage=e=>{e.data.type==="AUDIO"&&(this.p.setBuffer(e.data.buffer),this.port.postMessage({type:"RECEIVED",len:e.data.buffer.length}))}}process(e,o,a){let u=a.gate[0],c=a.speed[0];this.p.setParams(u,c);let l=o[0];for(let t=0;t<l.length;t++)this.p.fillAudioMono(l[t]);return!0}static get parameterDescriptors(){return k}};registerProcessor("PcmOscillatorWorklet",f);})();`;
