export const PROCESSOR = `(()=>{function y(i){return Object.keys(i).map(s=>{let{min:e,max:n,init:o}=i[s];return{name:s,minValue:e,maxValue:n,defaultValue:o,automationRate:"k-rate"}})}var x={gate:{min:0,max:1,init:0},speed:{min:-100,max:100,init:1}};function O(i){let s=0,e=null,n=0,o=1;function u(t,r){if(e)for(o=r;o>e.length;)o-=e.length;s=t}function d(t){e=t}function c(t){if(e){let r=e.length;for(let f=0;f<t.length;f++){let m=Math.floor(n),g=n-m,a=n+o;a<0&&(a+=r),a>=r&&(a-=r);let p=Math.ceil(a),A=a-p,P=e[m],N=e[p];t[f]=P+(N-P)*(g+A),n=a}}else for(let r=0;r<t.length;r++)t[r]=0}return{setParams:u,fillAudioMono:c,setBuffer:d}}var b=y(x),l=class extends AudioWorkletProcessor{constructor(){super();this.p=O(sampleRate),this.port.onmessage=e=>{e.data.type==="AUDIO"&&(this.p.setBuffer(e.data.buffer),this.port.postMessage({type:"RECEIVED",len:e.data.buffer.length}))}}process(e,n,o){let u=o.gate[0],d=o.speed[0];this.p.setParams(u,d);let c=n[0];for(let t=0;t<c.length;t++)this.p.fillAudioMono(c[t]);return!0}static get parameterDescriptors(){return b}};registerProcessor("PcmOscillatorWorklet",l);})();`;
