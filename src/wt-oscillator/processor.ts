export const PROCESSOR = `(()=>{function O(s){return Object.keys(s).map(e=>{let{min:t,max:r,init:n}=s[e];return{name:e,minValue:t,maxValue:r,defaultValue:n,automationRate:"k-rate"}})}function d(s){let e=s,t=s.length,r=0,n=0;function a(i){let u=Math.floor(r),x=r-u,m=i>0?u+1:u-1,P=m<0?t-1:m>=t?0:m,o=e[n+u],p=e[n+P],f=o+(p-o)*x;return r+=i,r>=t&&(r-=t),r<0&&(r+=t),f}function c(i,u){n=Math.floor(i??0),t=Math.floor(Math.min(u??t,e.length)),r=r%t}function l(i){r=i%t}return{read:a,set:l,window:c}}var h=class{constructor(e){this.max=e;this.prev=0,this.val=0}set(e){this.val=e%this.max}tick(e){return e<this.prev&&(this.val=(this.val+1)%this.max),this.prev=e,this.val}};var y=class{constructor(e,t=440){this.sampleRate=e;this.inc=t/this.sampleRate,this.phase=0}freq(e){this.inc=e/this.sampleRate}tick(e=1){for(this.phase+=e*this.inc;this.phase>=1;)this.phase-=1;for(;this.phase<=-1;)this.phase+=1;return this.phase}};var W={frequency:{min:0,max:2e4,init:440},morphFrequency:{min:0,max:10,init:.005}};function N(s){let e=new Float32Array(0),t=440,r=new y(s,.5),n=new h(0),a=0,c=0,l=d(e),i=d(e);function u(o){l.window(o%a*a,a),i.window((o+1)%a*a,a)}function x(o,p){a=Math.min(p,o.length),c=Math.floor(o.length/a),l=d(o),i=d(o),n=new h(c-1),u(n.val)}function m(o){t=o.frequency[0],c>0&&r.freq(o.morphFrequency[0])}function P(o){if(!l||!c||!a)return;let p=t/220;for(let f=0;f<o.length;f++){let b=r.tick(),w=l.read(p),v=i.read(p);o[f]=(1-b)*w+b*v;let S=n.val,k=n.tick(b);S!==k&&u(k)}return n.val}return{setWavetable:x,setParams:m,fillAudioMono:P}}var g=O(W),A=class extends AudioWorkletProcessor{constructor(){super();this.d=!1,this.p=N(sampleRate),this.port.onmessage=t=>{switch(t.data.type){case"DISCONNECT":this.d=!0;break;case"WAVE_TABLE":this.p.setWavetable(t.data.data,t.data.wavetableLength??256);break}}}process(t,r,n){return this.d?!1:(this.p.setParams(n),this.p.fillAudioMono(r[0][0]),!0)}static get parameterDescriptors(){return g}};registerProcessor("WtOscillatorWorklet",A);})();`;
