export const PROCESSOR = `(()=>{function m(n){return Object.keys(n).map(a=>{let{min:t,max:o,def:e}=n[a];return{name:a,minValue:t,maxValue:o,defaultValue:e,automationRate:"k-rate"}})}var d={frequency:{min:0,max:2e4,def:440},morphFrequency:{min:0,max:10,def:.005}};function y(n){let a=440,t=.005,o=null,e=256,f=0,c=0,p=0;function P(r,i){o=r,e=Math.min(i,r.length),f=Math.floor(r.length/e),c=0,p=0}function O(r){a=r.frequency[0],t=r.morphFrequency[0]}function x(r){if(!o||!f)return;let i=c*e,b=1;a/e/44100;let s=i+p;for(let l=0;l<r.length;l++)r[l]=o[s],s+=1,s===e&&(s=0)}return{setBuffer:P,setParams:O,fillAudioMono:x}}var A=m(d),u=class extends AudioWorkletProcessor{constructor(){super();this.p=y(sampleRate),this.port.onmessage=t=>{if(t.data.type==="AUDIO"){let o=t.data.buffer,e=t.data.wavetableLength??256;this.p.setBuffer(t.data.buffer,e),this.port.postMessage({type:"RECEIVED",len:t.data.buffer.length})}}}process(t,o,e){return this.p.setParams(e),this.p.fillAudioMono(o[0][0]),!0}static get parameterDescriptors(){return A}};registerProcessor("WtOscillatorWorklet",u);})();`;
