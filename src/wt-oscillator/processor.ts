export const PROCESSOR = `(()=>{function w(i){return Object.keys(i).map(t=>{let{min:e,max:r,def:n}=i[t];return{name:t,minValue:e,maxValue:r,defaultValue:n,automationRate:"k-rate"}})}function m(i){let t=i,e=i.length,r=0,n=0;function l(a){let u=Math.floor(r),b=r-u,p=a>0?u+1:u-1,x=p<0?e-1:p>=e?0:p,h=t[n+u],o=t[n+x],c=h+(o-h)*b;return r+=a,r>=e&&(r-=e),r<0&&(r+=e),c}function f(a,u){n=Math.floor(a??0),e=Math.floor(Math.min(u??e,t.length)),r=r%e}function s(a){r=a%e}return{read:l,set:s,window:f}}var d=class{constructor(t){this.max=t;this.prev=0,this.val=0}set(t){this.val=t%this.max}tick(t){return t<this.prev&&(this.val=(this.val+1)%this.max),this.prev=t,this.val}};var y=class{constructor(t,e=440){this.sampleRate=t;this.inc=e/this.sampleRate,this.phase=0}freq(t){this.inc=t/this.sampleRate}tick(){let t=this.phase;return this.phase+=this.inc,this.phase>=1?this.phase-=1:this.phase<=-1&&(this.phase+=1),t}};var W={frequency:{min:0,max:2e4,def:440},morphFrequency:{min:0,max:10,def:.005}};function g(i){let t=new Float32Array(0),e=440,r=new y(i,.5),n=new d(0),l=m(t),f=m(t),s=0,a=0;function u(o){l.window(o%s*s,s),f.window((o+1)%s*s,s)}function b(o,c){s=Math.min(c,o.length),a=Math.floor(o.length/s),l=m(o),f=m(o),n=new d(a),u(n.val)}function p(){return{$frequency:e,$window:n.val,$wtCount:a,$wtLen:s}}function x(o){e=o.frequency[0],a>0&&r.freq(o.morphFrequency[0])}function h(o){if(!l||!a)return;let c=e/440;for(let P=0;P<o.length;P++){let O=r.tick(),v=l.read(c),M=f.read(c);o[P]=(1-O)*v+O*M;let R=n.val,k=n.tick(O);R!==k&&u(k)}return n.val}return{setBuffer:b,setParams:x,fillAudioMono:h,debug:p}}var D=w(W),A=class extends AudioWorkletProcessor{constructor(){super();this.s=0,this.stop=!1,this.p=g(sampleRate),this.port.onmessage=e=>{switch(e.data.type){case"STOP":this.stop=!0;break;case"WAVE_TABLE":this.p.setBuffer(e.data.buffer,e.data.wavetableLength??256);break}}}process(e,r,n){return this.stop?!1:(this.p.setParams(n),this.p.fillAudioMono(r[0][0]),!0)}static get parameterDescriptors(){return D}};registerProcessor("WtOscillatorWorklet",A);})();`;
