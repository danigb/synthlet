export const PROCESSOR = `(()=>{function O(s){return Object.keys(s).map(e=>{let{min:t,max:r,init:o}=s[e];return{name:e,minValue:t,maxValue:r,defaultValue:o,automationRate:"k-rate"}})}function d(s){let e=s,t=s.length,r=0,o=0;function a(i){let u=Math.floor(r),b=r-u,f=i>0?u+1:u-1,x=f<0?t-1:f>=t?0:f,n=e[o+u],p=e[o+x],m=n+(p-n)*b;return r+=i,r>=t&&(r-=t),r<0&&(r+=t),m}function c(i,u){o=Math.floor(i??0),t=Math.floor(Math.min(u??t,e.length)),r=r%t}function l(i){r=i%t}return{read:a,set:l,window:c}}var h=class{constructor(e){this.max=e;this.prev=0,this.val=0}set(e){this.val=e%this.max}tick(e){return e<this.prev&&(this.val=(this.val+1)%this.max),this.prev=e,this.val}};var y=class{constructor(e,t=440){this.sampleRate=e;this.inc=t/this.sampleRate,this.phase=0}freq(e){this.inc=e/this.sampleRate}tick(){let e=this.phase;return this.phase+=this.inc,this.phase>=1?this.phase-=1:this.phase<=-1&&(this.phase+=1),e}};var W={frequency:{min:0,max:2e4,init:440},morphFrequency:{min:0,max:10,init:.005}};function v(s){let e=new Float32Array(0),t=440,r=new y(s,.5),o=new h(0),a=0,c=0,l=d(e),i=d(e);function u(n){l.window(n%a*a,a),i.window((n+1)%a*a,a)}function b(n,p){a=Math.min(p,n.length),c=Math.floor(n.length/a),l=d(n),i=d(n),o=new h(c-1),u(o.val)}function f(n){t=n.frequency[0],c>0&&r.freq(n.morphFrequency[0])}function x(n){if(!l||!c||!a)return;let p=t/220;for(let m=0;m<n.length;m++){let A=r.tick(),w=l.read(p),M=i.read(p);n[m]=(1-A)*w+A*M;let g=o.val,k=o.tick(A);g!==k&&u(k)}return o.val}return{setWavetable:b,setParams:f,fillAudioMono:x}}var R=O(W),P=class extends AudioWorkletProcessor{constructor(){super();this.s=0,this.stop=!1,this.p=v(sampleRate),this.port.onmessage=t=>{switch(t.data.type){case"STOP":this.stop=!0;break;case"WAVE_TABLE":this.p.setWavetable(t.data.data,t.data.wavetableLength??256);break}}}process(t,r,o){return this.stop?!1:(this.p.setParams(o),this.p.fillAudioMono(r[0][0]),!0)}static get parameterDescriptors(){return R}};registerProcessor("WtOscillatorWorklet",P);})();`;
