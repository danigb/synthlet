export const PROCESSOR = `(()=>{function y(s){return Object.keys(s).map(n=>{let{min:t,max:e,def:r}=s[n];return{name:n,minValue:t,maxValue:e,defaultValue:r,automationRate:"k-rate"}})}function P(s){let n=s,t=s.length,e=0,r=0;function d(i){let a=Math.floor(e),f=e-a,l=i>0?a+1:a-1,o=l<0?t-1:l>=t?0:l,u=n[r+a],c=n[r+o],A=u+(c-u)*f;return e+=i,e>=t&&(e-=t),e<0&&(e+=t),A}function m(i,a,f){r=Math.floor(a??0),t=Math.floor(Math.min(f??t,n.length)),e=i%t}return{read:d,set:m}}var b={frequency:{min:0,max:2e4,def:440},morphFrequency:{min:0,max:10,def:.005}};function x(s){let n=440,t=.005,e,r=256,d=0,m=0,i=0;function a(o,u){e=P(o),r=Math.min(u,o.length),d=Math.floor(o.length/r),m=0,i=0,e.set(0,m*r,r)}function f(o){n=o.frequency[0],t=o.morphFrequency[0]}function l(o){if(!e||!d)return;let u=n/440;for(let c=0;c<o.length;c++)o[c]=e.read(u)}return{setBuffer:a,setParams:f,fillAudioMono:l}}var O=y(b),p=class extends AudioWorkletProcessor{constructor(){super();this.p=x(sampleRate),this.port.onmessage=t=>{if(t.data.type==="WAVE_TABLE"){let e=t.data.buffer,r=t.data.wavetableLength??256;this.p.setBuffer(e,r),this.port.postMessage({type:"WT RECEIVED",len:t.data.buffer.length})}}}process(t,e,r){return this.p.setParams(r),this.p.fillAudioMono(e[0][0]),!0}static get parameterDescriptors(){return O}};registerProcessor("WtOscillatorWorklet",p);})();`;
